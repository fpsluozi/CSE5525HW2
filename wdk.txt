# CSE5525 NLP Homework 2 Group 1
import nltk
import numpy
import itertools
from nltk.corpus import treebank

full_training_set = nltk.corpus.treebank.tagged_sents()[0:3500]
training_set1 = full_training_set[0:1750]
training_set2 = full_training_set[1750:]
test_set = nltk.corpus.treebank.tagged_sents()[3500:]

# Step 2: Retrieve P(W_i | T_i) and P(T_i| T_i-1)
#
# Sample Usage 1: 
#   print set1_cpd_tags['DT'].prob('JJ')
#   meaning print the prob of adjective given determinor from training set 1
#
# Sample Usage 2: 
#   print full_cpd_word_tag['DT'].prob('the')
#   meaning print the prob of word 'the' given determinor from full training set
#
# PS. cpd as the Conditional Prob Distribution
# PSS. We use Laplace distribution for unseen cases

# Full Traning Set
full_training_set_words = []
for sent in full_training_set:
    full_training_set_words.append(('<s>','<s>'))
    full_training_set_words.extend([ (tag, word) for (word, tag) in sent ])
    full_training_set_words.append(('</s>','</s>'))

full_tags = [tag for (tag, word) in full_training_set_words]
full_words = [word for (tag, word) in full_training_set_words]

full_cfd_word_tag = nltk.ConditionalFreqDist(full_training_set_words)
full_cfd_tags = nltk.ConditionalFreqDist(nltk.bigrams(full_tags))

tag_set = set(full_tags)
word_set = set(full_words)

for tag_1 in tag_set: # Laplace smoothing
    for tag_2 in tag_set:
        if full_cfd_tags[tag_1][tag_2] == 0:
            full_cfd_tags[tag_1][tag_2] = 1
for tag in tag_set: # Laplace smoothing
    for word in word_set:
        if full_cfd_word_tag[tag][word] == 0:
            full_cfd_word_tag[tag][word] = 1
            
full_cpd_word_tag = nltk.ConditionalProbDist(full_cfd_word_tag, nltk.MLEProbDist)
full_cpd_tags = nltk.ConditionalProbDist(full_cfd_tags, nltk.MLEProbDist)

# Traning Set 1
set1_training_set_words = []
for sent in training_set1:
    set1_training_set_words.append(('<s>','<s>'))
    set1_training_set_words.extend([ (tag, word) for (word, tag) in sent ])
    set1_training_set_words.append(('</s>','</s>'))

set1_tags = [tag for (tag, word) in set1_training_set_words]
set1_words = [word for (tag, word) in set1_training_set_words]

set1_cfd_word_tag = nltk.ConditionalFreqDist(set1_training_set_words)
set1_cfd_tags = nltk.ConditionalFreqDist(nltk.bigrams(set1_tags))

for tag_1 in set(set1_tags): # Laplace smoothing
    for tag_2 in set(set1_tags):
        if set1_cfd_tags[tag_1][tag_2] == 0:
            set1_cfd_tags[tag_1][tag_2] = 1
for tag in set(set1_tags): # Laplace smoothing
    for word in set(set1_words):
        if set1_cfd_word_tag[tag][word] == 0:
            set1_cfd_word_tag[tag][word] = 1
            
set1_cpd_word_tag = nltk.ConditionalProbDist(set1_cfd_word_tag, nltk.MLEProbDist)
set1_cpd_tags = nltk.ConditionalProbDist(set1_cfd_tags, nltk.MLEProbDist)



# Step 3

# Step 4

# Step 5

# Step 6

import numpy

epsilon = 0.001
dict_tags = {}
dict_words = {}
num_tags = 1 # start from 1, consistent with equations in the book
num_words = 1

for tag in tag_set:
    dict_tags[tag] = num_tags
    num_tags = num_tags + 1
    
for word in word_set:
    dict_words[word] = num_words
    num_words = num_words + 1
            
#initalize from training_set1
A_table = numpy.zeros((num_tags + 1, num_tags + 1), dtype='double')
B_table = numpy.zeros((num_tags + 1, num_words + 1), dtype='double')

# aij
for tag_1 in dict_tags.keys():
    for tag_2 in dict_tags.keys():
        A_table[dict_tags[tag_1]][dict_tags[tag_2]] = set1_cpd_tags[tag_1].prob(tag_2)

# bi(W)
num_temp = 0

for word in dict_words.keys():
    w = dict_words[word]
    print w
    num_tag = 1
    for tag in tag_set:
        B_table[num_tag][w] = set1_cpd_word_tag[tag].prob(word)
	num_tag = num_tag + 1

# a01 - a0T 
#START_table = numpy.zeros(num_tags)
for tag in dict_tags.keys():
    A_table[0][dict_tags[tag]] = set1_cpd_tags['<s>'].prob(tag)

# a1(T+1) - aT(T+1)
#END_table = numpy.zeros(num_tags)
for tag in dict_tags.keys():
    A_table[dict_tags[tag]][num_tags] = set1_cpd_tags[tag].prob('</s>')

# b(T+1)(END) = b(0)(START) = 1
B_table[0][0] = 1
B_table[num_tags][num_words] = 1